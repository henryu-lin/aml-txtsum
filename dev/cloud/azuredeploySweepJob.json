{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspaceName": {
      "type": "string",
      "defaultValue": "TxtsumDemo",
      "metadata": {
        "description": "Specifies the name of the Azure Machine Learning Workspace which will contain these assets."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "westus2",
      "metadata": {
        "description": "Specifies the location for all resources."
      }
    },
    "computeName": {
      "type": "string",
      "defaultValue": "gpu-v100-8-lp",
      "metadata": {
        "description": "Specifies the name of the Azure Machine Learning Compute cluster."
      }
    },
    "computeSize": {
      "type": "string",
      "defaultValue": "Standard_ND40rs_v2",
      "metadata": {
        "description": " The size of agent VMs. More details can be found here: https://aka.ms/azureml-vm-details."
      }
    },
    "computeNodes": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": " The number of nodes to use on the cluster."
      }
    },
    "computePriority": {
      "type": "string",
      "defaultValue": "LowPriority",
      "metadata": {
        "description": " Virtual Machine priority - Dedicated, LowPriority."
      }
    },
    "codeUrl": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/henryu-lin/azureml-greenai-txtsum/main/examples/jobs/src/main.py",
      "metadata": {
        "description": "Link to the training script."
      }
    },
    "codeName": {
      "type": "string",
      "defaultValue": "hf-txtsum",
      "metadata": {
        "description": "The name of code asset."
      }
    },
    "codeVersion": {
      "type": "string",
      "defaultValue": "1"
    },
    "environmentDockerfile": {
      "type": "string",
      "defaultValue": "# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License.\n\nFROM mcr.microsoft.com/azureml/o16n-base/python-assets:20210428.36856618 AS inferencing-assets\n\n# Tag: cuda:11.0.3-devel-ubuntu18.04\n# Env: CUDA_VERSION=11.1.1\n# Env: NCCL_VERSION=2.8.4\n# Env: CUDNN_VERSION=8.0.5.39\n\nFROM nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04\n\nUSER root:root\n\nENV com.nvidia.cuda.version $CUDA_VERSION\nENV com.nvidia.volumes.needed nvidia_driver\nENV LANG=C.UTF-8 LC_ALL=C.UTF-8\nENV DEBIAN_FRONTEND noninteractive\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64\nENV NCCL_DEBUG=INFO\nENV HOROVOD_GPU_ALLREDUCE=NCCL\n\n# Install Common Dependencies\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    # SSH and RDMA\n    libmlx4-1 \\\n    libmlx5-1 \\\n    librdmacm1 \\\n    libibverbs1 \\\n    libmthca1 \\\n    libdapl2 \\\n    dapl2-utils \\\n    openssh-client \\\n    openssh-server \\\n    redis \\\n    iproute2 && \\\n    # Others\n    apt-get install -y \\\n    build-essential \\\n    bzip2 \\\n    libbz2-1.0 \\\n    systemd \\\n    git \\\n    wget \\\n    cpio \\\n    pciutils \\\n    libnuma-dev \\\n    ibutils \\\n    ibverbs-utils \\ \n    rdmacm-utils \\\n    infiniband-diags \\\n    perftest \\\n    librdmacm-dev \\\n    libibverbs-dev \\\n    libsm6 \\\n    libxext6 \\\n    libxrender-dev \\\n    libssl1.0.0 \\\n    linux-image-aws \\ \n    linux-image-azure \\ \n    linux-image-generic \\\n    linux-image-kvm \\\n    linux-image-lowlatency \\\n    linux-image-virtual \\\n    linux-image-gke \\\n    linux-image-oem \\\n    slapd \\\n    perl \\ \n    ca-certificates \\\n    apt \\\n    p11-kit \\\n    libp11-kit0 \\\n    tar \\\n    libzstd1 \\\n    libglib2.0-0 \\\n    libnettle6 \\\n    fuse && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Inference\n# Copy logging utilities, nginx and rsyslog configuration files, IOT server binary, etc.\nCOPY --from=inferencing-assets /artifacts /var/\nRUN /var/requirements/install_system_requirements.sh && \\\n    cp /var/configuration/rsyslog.conf /etc/rsyslog.conf && \\\n    cp /var/configuration/nginx.conf /etc/nginx/sites-available/app && \\\n    ln -s /etc/nginx/sites-available/app /etc/nginx/sites-enabled/app && \\\n    rm -f /etc/nginx/sites-enabled/default\nENV SVDIR=/var/runit\nENV WORKER_TIMEOUT=300\nEXPOSE 5001 8883 8888\n\n# Conda Environment\nENV MINICONDA_VERSION py37_4.9.2\nENV PATH /opt/miniconda/bin:$PATH\nRUN wget -qO /tmp/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \\\n    bash /tmp/miniconda.sh -bf -p /opt/miniconda && \\\n    conda clean -ay && \\\n    rm -rf /opt/miniconda/pkgs && \\\n    rm /tmp/miniconda.sh && \\\n    find / -type d -name __pycache__ | xargs rm -rf\n\n# Open-MPI-UCX installation\nRUN mkdir /tmp/ucx && \\\n    cd /tmp/ucx && \\\n\twget -q https://github.com/openucx/ucx/releases/download/v1.6.1-rc2/ucx-1.6.1.tar.gz && \\\n\ttar zxf ucx-1.6.1.tar.gz && \\\n\tcd ucx-1.6.1 && \\\n\t./configure --prefix=/usr/local --enable-optimizations --disable-assertions --disable-params-check --enable-mt && \\\n\tmake -j $(nproc --all) && \\\n\tmake install && \\\n\trm -rf /tmp/ucx\n\n# Open-MPI installation\nENV OPENMPI_VERSION 4.1.0\nRUN mkdir /tmp/openmpi && \\\n    cd /tmp/openmpi && \\\n    wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-${OPENMPI_VERSION}.tar.gz && \\\n    tar zxf openmpi-${OPENMPI_VERSION}.tar.gz && \\\n    cd openmpi-${OPENMPI_VERSION} && \\\n    ./configure --with-ucx=/usr/local/ --enable-mca-no-build=btl-uct --enable-orterun-prefix-by-default && \\\n    make -j $(nproc) all && \\\n    make install && \\\n    ldconfig && \\\n    rm -rf /tmp/openmpi\t\n\t\n# Msodbcsql17 installation\nRUN apt-get update && \\\n    apt-get install -y curl && \\\n    curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && \\\n    curl https://packages.microsoft.com/config/ubuntu/18.04/prod.list > /etc/apt/sources.list.d/mssql-release.list && \\\n    apt-get update && \\\n    ACCEPT_EULA=Y apt-get install -y msodbcsql17\n\n#Cmake Installation\nRUN apt-get update && \\\n    apt-get install -y cmake",
      "metadata": {
        "description": "Docker command line instructions to assemble an image."
      }
    },
    "environmentCondaFile": {
      "type": "string",
      "defaultValue": "{\n  \"channels\": [\n    \"pytorch\",\n    \"nvidia\",\n    \"conda-forge\"\n  ],\n  \"dependencies\": [\n    \"python=3.8\",\n    \"pytorch=1.8.1\",\n    \"cudatoolkit=11.1\",\n    \"pip\",\n    {\n      \"pip\": [\n        \"numpy\",\n        \"nltk\",\n        \"protobuf\",\n        \"py7zr\",\n        \"sentencepiece\",\n        \"datasets\",\n        \"git+https://github.com/huggingface/transformers\",\n        \"rouge-score\",\n        \"mlflow\",\n        \"azureml-mlflow\",\n        \"fairscale\",\n        \"deepspeed\",\n        \"codecarbon\"\n      ]\n    }\n  ],\n  \"name\": \"azureml_601445831ecbb633fa034000577e4525\"\n}",
      "metadata": {
        "description": "Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages."
      }
    },
    "environmentName": {
      "type": "string",
      "defaultValue": "hf-gpu",
      "metadata": {
        "description": "The name of environment asset."
      }
    },
    "environmentVersion": {
      "type": "string",
      "defaultValue": "1"
    },
    "jobCommand": {
      "type": "string",
      "defaultValue": "python -m torch.distributed.launch --nproc_per_node 8 main.py --model_name_or_path 'facebook/bart-large-xsum' --dataset_name 'samsum' --max_source_length 512 --max_target_length 90 --fp16 True --seed 1 --per_device_train_batch_size 16 --per_device_eval_batch_size 16 --learning_rate 5e-5 --evaluation_strategy 'epoch' --logging_strategy 'epoch' --do_train --do_predict --predict_with_generate --overwrite_output_dir --output_dir './outputs' --logging_dir './logs' --ddp_find_unused_parameters False\n",
      "metadata": {
        "description": "The command to execute on startup of the job. eg. \"python train.py\""
      }
    },
    "jobName": {
      "type": "string",
      "defaultValue": "cmd-job-pytorch",
      "metadata": {
        "description": "The name and identifier for the Job."
      }
    },
    "experimentName": {
      "type": "string",
      "defaultValue": "hf-pytorch-demo",
      "metadata": {
        "description": "The name of the experiment the job belongs to."
      }
    }
  },
  "variables": {
    "environmentVersionResourceId": "[resourceId('Microsoft.MachineLearningServices/workspaces/environments/versions', parameters('workspaceName'), parameters('environmentName'), parameters('environmentVersion'))]",
    "codeVersionResourceId": "[resourceId('Microsoft.MachineLearningServices/workspaces/codes/versions', parameters('workspaceName'), parameters('codeName'), parameters('codeVersion'))]",
    "computeResourceId": "[resourceId('Microsoft.MachineLearningServices/workspaces/computes', parameters('workspaceName'), parameters('computeName'))]",
    "storageAccountName": "[concat(toLower(parameters('workspaceName')), 'sa')]",
    "datastoreName": "demo-assets",
    "container": {
      "name": "aml-uploads",
      "path": "code"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-02-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "encryption": {
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "supportsHttpsTrafficOnly": true
      },
      "resources": [
        {
          "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
          "apiVersion": "2021-02-01",
          "name": "[concat(variables('storageAccountName'), '/default/', variables('container').name)]",
          "dependsOn": [
            "[variables('storageAccountName')]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.MachineLearningServices/workspaces",
      "apiVersion": "2021-04-01",
      "name": "[parameters('workspaceName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('storageAccountName')]"
      ],
      "identity": {
        "type": "systemAssigned"
      },
      "properties": {
        "friendlyName": "[parameters('workspaceName')]",
        "storageAccount": "[resourceId('Microsoft.Storage/storageAccount', variables('storageAccountName'))]"
      },
      "resources": [
        {
          "type": "Microsoft.MachineLearningServices/workspaces/computes",
          "name": "[concat(parameters('workspaceName'), '/', parameters('computeName'))]",
          "apiVersion": "2021-04-01",
          "dependsOn": [
            "[parameters('workspaceName')]"
          ],
          "properties": {
            "computeType": "AmlCompute",
            "properties": {
              "vmSize": "[parameters('computeSize')]",
              "vmPriority": "[parameters('computePriority')]",
              "scaleSettings": {
                "minNodeCount": 0,
                "maxNodeCount": "[parameters('computeNodes')]",
                "nodeIdleTimeBeforeScaleDown": "300"
              }
            }
          }
        },
        {
          "type": "Microsoft.MachineLearningServices/workspaces/datastores",
          "apiVersion": "2021-03-01-preview",
          "name": "[concat(parameters('workspaceName'), '/', variables('datastoreName'))]",
          "dependsOn": [
            "[parameters('workspaceName')]",
            "[variables('container').name]"
          ],
          "properties": {
            "contents": {
              "contentsType": "AzureBlob",
              "accountName": "[variables('storageAccountName')]",
              "containerName": "[variables('container').name]",
              "endpoint": "core.windows.net",
              "protocol": "https",
              "credentials": {
                "credentialsType": "AccountKey"
              }
            }
          }
        }
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "UploadCode",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('storageAccountName')]",
        "[variables('container').name]"
      ],
      "kind": "AzureCLI",
      "properties": {
        "azCliVersion": "2.15.0",
        "arguments": "[concat(parameters('codeUrl'), ' ', variables('container').name, ' ', variables('container').path, ' ', variables('storageAccountName'))]",
        "scriptContent": "wget $1; downloadfilename=$(basename $1); az storage blob upload -f $downloadfilename -c $2/$3 --account-name $4 -n $downloadfilename",
        "timeout": "PT30M",
        "cleanupPreference": "Always",
        "retentionInterval": "P1D"
      }
    },
    {
      "name": "[concat(parameters('workspaceName'), '/', parameters('codeName'), '/', parameters('codeVersion'))]",
      "type": "Microsoft.MachineLearningServices/workspaces/codes/versions",
      "apiVersion": "2021-03-01-preview",
      "dependsOn": [
        "[parameters('workspaceName')]",
        "UploadCode",
        "[variables('datastoreName')]"
      ],
      "properties": {
        "datastoreId": "[resourceId('Microsoft.MachineLearningServices/workspaces/datastores', variables('datastoreName'))]",
        "path": "[variables('container').path]"
      }
    },
    {
      "name": "[concat(parameters('workspaceName'), '/', parameters('environmentName'), '/', parameters('environmentVersion'))]",
      "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
      "apiVersion": "2021-03-01-preview",
      "dependsOn": [
        "[parameters('workspaceName')]"
      ],
      "properties": {
        "docker": {
          "platform": {
              "operatingSystemType": "Linux"
          },
          "dockerSpecificationType": "Build",
          "dockerfile": "[parameters('environmentDockerfile')]"
        },
        "condaFile": "[parameters('environmentCondaFile')]"
      }
    },
    {
      "name": "[concat(parameters('workspaceName'), '/', parameters('jobName'))]",
      "type": "Microsoft.MachineLearningServices/workspaces/jobs",
      "apiVersion": "2021-03-01-preview",
      "dependsOn": [
        "[parameters('workspaceName')]",
        "[variables('codeVersionResourceId')]",
        "[variables('environmentVersionResourceId')]",
        "[variables('computeResourceId')]"
      ],
      "properties": {
        "jobType": "Sweep",
        "compute": {
          "instanceCount": "[parameters('computeNodes')]",
          "target": "[variables('computeResourceId')]"
        },
        "timeout": "60",
        "algorithm": "Grid",
        "experimentName": "[parameters('experimentName')]",
        "maxConcurrentTrials": 1,
        "maxTotalTrials": 4,
        "objective": {
          "goal": "Maximize",
          "primaryMetric": "string"
        },
        "searchSpace": {
          "lr": {
            "type": "choice",
            "values": [3e-05, 5e-05]
          },
          "wd": {
            "type": "choice",
            "values": [0.0, 0.1]
          }
        },
        "trial": {
          "codeId": "[variables('codeVersionResourceId')]",
          "command": "[parameters('jobCommand')]",
          "environmentId": "[variables('environmentVersionResourceId')]",
          "inputDataBindings": {},
          "outputDataBindings": {}
        }
      }
    }
  ],
  "outputs": {
    "result": {
      "type": "Object",
      "value": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces/jobs', parameters('workspaceName'), parameters('jobName')))]"
    }
  }
}